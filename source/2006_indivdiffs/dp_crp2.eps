%!PS-Adobe-3.0 EPSF-3.0
%%Title: (Visio-indivdiffs.vsd)
%%Version: 1 4
%%Creator: (PScript5.dll Version 5.2)
%%CreationDate: (D:20041227135115Z)
%%For: (Dan)
%%DocumentData: Clean7Bit
%%BoundingBox: 81 574 358 795
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
81 574 moveto 358 574 lineto 358 795 lineto 81 795 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.13 0
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated.
%%Version: 1.13 0
systemdict/languagelevel known dup{currentglobal false setglobal}{false}ifelse
exch userdict/Adobe_CoolType_Utility 2 copy known{2 copy get dup maxlength 25
add dict copy}{25 dict}ifelse put Adobe_CoolType_Utility begin/ct_Level2? exch
def/ct_Clone? 1183615869 internaldict dup/CCRun known not exch/eCCRun known
not ct_Level2? and or def/ct_UseNativeCapability? systemdict/composefont known
def/ct_MakeOCF 35 dict def/ct_Vars 25 dict def/ct_GlyphDirProcs 6 dict def
/ct_BuildCharDict 15 dict dup begin/charcode 2 string def/dst_string 1500
string def/nullstring()def/usewidths? true def end def ct_Level2?{setglobal}{
pop}ifelse ct_GlyphDirProcs begin/GetGlyphDirectory{systemdict/languagelevel
known{pop/CIDFont findresource/GlyphDirectory get}{1 index/CIDFont
findresource/GlyphDirectory get dup type/dicttype eq{dup dup maxlength exch
length sub 2 index lt{dup length 2 index add dict copy 2 index/CIDFont
findresource/GlyphDirectory 2 index put}if}if exch pop exch pop}ifelse +}def/+
{systemdict/languagelevel known{currentglobal false setglobal 3 dict begin/vm
exch def}{1 dict begin}ifelse/$ exch def systemdict/languagelevel known{vm
setglobal/gvm currentglobal def $ gcheck setglobal}if ?{$ begin}if}def/?{$
type/dicttype eq}def/|{userdict/Adobe_CoolType_Data known{Adobe_CoolType_Data
/AddWidths? known{currentdict Adobe_CoolType_Data begin begin AddWidths?{
Adobe_CoolType_Data/CC 3 index put ?{def}{$ 3 1 roll put}ifelse CC charcode
exch 1 index 0 2 index 256 idiv put 1 index exch 1 exch 256 mod put
stringwidth 2 array astore currentfont/Widths get exch CC exch put}{?{def}{$ 3
1 roll put}ifelse}ifelse end end}{?{def}{$ 3 1 roll put}ifelse}ifelse}{?{def}{
$ 3 1 roll put}ifelse}ifelse}def/!{?{end}if systemdict/languagelevel known{gvm
setglobal}if end}def/:{string currentfile exch readstring pop}executeonly def
end ct_MakeOCF begin/ct_cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09
/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C
/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F
/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42
/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55
/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68
/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B
/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E
/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1
/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4
/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7
/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA
/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED
/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_CID_STR_SIZE 8000 def/ct_mkocfStr100 100 string def/ct_defaultFontMtx[.001
0 0 .001 0 0]def/ct_1000Mtx[1000 0 0 1000 0 0]def/ct_raise{exch cvx exch
errordict exch get exec stop}bind def/ct_reraise{cvx $error/errorname get
(Error: )print dup(                    )cvs print errordict exch get exec stop
}bind def/ct_cvnsi{1 index add 1 sub 1 exch 0 4 1 roll{2 index exch get exch 8
bitshift add}for exch pop}bind def/ct_GetInterval{Adobe_CoolType_Utility
/ct_BuildCharDict get begin/dst_index 0 def dup dst_string length gt{dup
string/dst_string exch def}if 1 index ct_CID_STR_SIZE idiv/arrayIndex exch def
2 index arrayIndex get 2 index arrayIndex ct_CID_STR_SIZE mul sub{dup 3 index
add 2 index length le{2 index getinterval dst_string dst_index 2 index
putinterval length dst_index add/dst_index exch def exit}{1 index length 1
index sub dup 4 1 roll getinterval dst_string dst_index 2 index putinterval
pop dup dst_index add/dst_index exch def sub/arrayIndex arrayIndex 1 add def 2
index dup length arrayIndex gt{arrayIndex get}{pop exit}ifelse 0}ifelse}loop
pop pop pop dst_string 0 dst_index getinterval end}bind def ct_Level2?{
/ct_resourcestatus currentglobal mark true setglobal{/unknowninstancename
/Category resourcestatus}stopped{cleartomark setglobal true}{cleartomark
currentglobal not exch setglobal}ifelse{{mark 3 1 roll/Category findresource
begin ct_Vars/vm currentglobal put({ResourceStatus} stopped)0()/SubFileDecode
filter cvx exec{cleartomark false}{{3 2 roll pop true}{cleartomark false}
ifelse}ifelse ct_Vars/vm get setglobal end}}{{resourcestatus}}ifelse bind def
/CIDFont/Category ct_resourcestatus{pop pop}{currentglobal true setglobal
/Generic/Category findresource dup length dict copy dup/InstanceType/dicttype
put/CIDFont exch/Category defineresource pop setglobal}ifelse
ct_UseNativeCapability?{/CIDInit/ProcSet findresource begin 12 dict begin
begincmap/CIDSystemInfo 3 dict dup begin/Registry(Adobe)def/Ordering(Identity)
def/Supplement 0 def end def/CMapName/Identity-H def/CMapVersion 1 def
/CMapType 1 def 1 begincodespacerange<0000><ffff>endcodespacerange 1
begincidrange<0000><ffff>0 endcidrange endcmap CMapName currentdict/CMap
defineresource pop end end}if}{/ct_Category 2 dict begin/CIDFont 10 dict def
/ProcSet 2 dict def currentdict end def/defineresource{ct_Category 1 index 2
copy known{get dup dup maxlength exch length eq{dup length 10 add dict copy
ct_Category 2 index 2 index put}if 3 index 3 index put pop exch pop}{pop pop
/defineresource/undefined ct_raise}ifelse}bind def/findresource{ct_Category 1
index 2 copy known{get 2 index 2 copy known{get 3 1 roll pop pop}{pop pop
/findresource/undefinedresource ct_raise}ifelse}{pop pop/findresource
/undefined ct_raise}ifelse}bind def/resourcestatus{ct_Category 1 index 2 copy
known{get 2 index known exch pop exch pop{0 -1 true}{false}ifelse}{pop pop
/findresource/undefined ct_raise}ifelse}bind def/ct_resourcestatus
/resourcestatus load def}ifelse/ct_CIDInit 2 dict begin/ct_cidfont_stream_init
{{dup(Binary)eq{pop null currentfile ct_Level2?{{cid_BYTE_COUNT()
/SubFileDecode filter}stopped{pop pop pop}if}if/readstring load exit}if dup
(Hex)eq{pop currentfile ct_Level2?{{null exch/ASCIIHexDecode filter/readstring
}stopped{pop exch pop(>)exch/readhexstring}if}{(>)exch/readhexstring}ifelse
load exit}if/StartData/typecheck ct_raise}loop cid_BYTE_COUNT ct_CID_STR_SIZE
le{2 copy cid_BYTE_COUNT string exch exec pop 1 array dup 3 -1 roll 0 exch put
}{cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi dup array exch 2 sub 0 exch 1
exch{2 copy 5 index ct_CID_STR_SIZE string 6 index exec pop put pop}for 2
index cid_BYTE_COUNT ct_CID_STR_SIZE mod string 3 index exec pop 1 index exch
1 index length 1 sub exch put}ifelse cid_CIDFONT exch/GlyphData exch put 2
index null eq{pop pop pop}{pop/readstring load 1 string exch{3 copy exec pop
dup length 0 eq{pop pop pop pop pop true exit}if 4 index eq{pop pop pop pop
false exit}if}loop pop}ifelse}bind def/StartData{mark{currentdict dup/FDArray
get 0 get/FontMatrix get 0 get .001 eq{dup/CDevProc known not{/CDevProc
1183615869 internaldict/stdCDevProc 2 copy known{get}{pop pop{pop pop pop pop
pop 0 -1000 7 index 2 div 880}}ifelse def}if}{/CDevProc{pop pop pop pop pop 0
1 cid_temp/cid_CIDFONT get/FDArray get 0 get/FontMatrix get 0 get div 7 index
2 div 1 index .88 mul}def}ifelse/cid_temp 15 dict def cid_temp begin
/cid_CIDFONT exch def 3 copy pop dup/cid_BYTE_COUNT exch def 0 gt{
ct_cidfont_stream_init FDArray{/Private get dup/SubrMapOffset known{begin
/Subrs SubrCount array def Subrs SubrMapOffset SubrCount SDBytes ct_Level2?{
currentdict dup/SubrMapOffset undef dup/SubrCount undef/SDBytes undef}if end
/cid_SD_BYTES exch def/cid_SUBR_COUNT exch def/cid_SUBR_MAP_OFFSET exch def
/cid_SUBRS exch def cid_SUBR_COUNT 0 gt{GlyphData cid_SUBR_MAP_OFFSET
cid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi 0 1 cid_SUBR_COUNT 1 sub{
exch 1 index 1 add cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add GlyphData exch
cid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi cid_SUBRS 4 2 roll
GlyphData exch 4 index 1 index sub ct_GetInterval dup length string copy put}
for pop}if}{pop}ifelse}forall}if cleartomark pop pop end CIDFontName
currentdict/CIDFont defineresource pop end end}stopped{cleartomark/StartData
ct_reraise}if}bind def currentdict end def/ct_saveCIDInit{/CIDInit/ProcSet
ct_resourcestatus{true}{/CIDInitC/ProcSet ct_resourcestatus}ifelse{pop pop
/CIDInit/ProcSet findresource ct_UseNativeCapability?{pop null}{/CIDInit
ct_CIDInit/ProcSet defineresource pop}ifelse}{/CIDInit ct_CIDInit/ProcSet
defineresource pop null}ifelse ct_Vars exch/ct_oldCIDInit exch put}bind def
/ct_restoreCIDInit{ct_Vars/ct_oldCIDInit get dup null ne{/CIDInit exch/ProcSet
defineresource pop}{pop}ifelse}bind def/ct_BuildCharSetUp{1 index begin
CIDFont begin Adobe_CoolType_Utility/ct_BuildCharDict get begin/ct_dfCharCode
exch def/ct_dfDict exch def CIDFirstByte ct_dfCharCode add dup CIDCount ge{pop
0}if/cid exch def{GlyphDirectory cid 2 copy known{get}{pop pop nullstring}
ifelse dup length FDBytes sub 0 gt{dup FDBytes 0 ne{0 FDBytes ct_cvnsi}{pop 0}
ifelse/fdIndex exch def dup length FDBytes sub FDBytes exch getinterval
/charstring exch def exit}{pop cid 0 eq{/charstring nullstring def exit}if/cid
0 def}ifelse}loop}def/ct_SetCacheDevice{0 0 moveto dup stringwidth 3 -1 roll
true charpath pathbbox 0 -1000 7 index 2 div 880 setcachedevice2 0 0 moveto}
def/ct_CloneSetCacheProc{1 eq{stringwidth pop -2 div -880 0 -1000 setcharwidth
moveto}{usewidths?{currentfont/Widths get cid 2 copy known{get exch pop aload
pop}{pop pop stringwidth}ifelse}{stringwidth}ifelse setcharwidth 0 0 moveto}
ifelse}def/ct_Type3ShowCharString{ct_FDDict fdIndex 2 copy known{get}{
currentglobal 3 1 roll 1 index gcheck setglobal ct_Type1FontTemplate dup
maxlength dict copy begin FDArray fdIndex get dup/FontMatrix 2 copy known{get}
{pop pop ct_defaultFontMtx}ifelse/FontMatrix exch dup length array copy def
/Private get/Private exch def/Widths rootfont/Widths get def/CharStrings 1
dict dup/.notdef<d841272cf18f54fc13>dup length string copy put def currentdict
end/ct_Type1Font exch definefont dup 5 1 roll put setglobal}ifelse dup
/CharStrings get 1 index/Encoding get ct_dfCharCode get charstring put
rootfont/WMode 2 copy known{get}{pop pop 0}ifelse exch 1000 scalefont setfont
ct_str1 0 ct_dfCharCode put ct_str1 exch ct_dfSetCacheProc ct_SyntheticBold{
currentpoint ct_str1 show newpath moveto ct_str1 true charpath ct_StrokeWidth
setlinewidth stroke}{ct_str1 show}ifelse}def/ct_Type4ShowCharString{ct_dfDict
ct_dfCharCode charstring FDArray fdIndex get dup/FontMatrix get dup
ct_defaultFontMtx ct_matrixeq not{ct_1000Mtx matrix concatmatrix concat}{pop}
ifelse/Private get Adobe_CoolType_Utility/ct_Level2? get not{ct_dfDict/Private
3 -1 roll{put}1183615869 internaldict/superexec get exec}if 1183615869
internaldict Adobe_CoolType_Utility/ct_Level2? get{1 index}{3 index/Private
get mark 6 1 roll}ifelse dup/RunInt known{/RunInt get}{pop/CCRun}ifelse get
exec Adobe_CoolType_Utility/ct_Level2? get not{cleartomark}if}bind def
/ct_BuildCharIncremental{{Adobe_CoolType_Utility/ct_MakeOCF get begin
ct_BuildCharSetUp ct_ShowCharString}stopped{stop}if end end end end}bind def
/BaseFontNameStr(BF00)def/ct_Type1FontTemplate 14 dict begin/FontType 1 def
/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encoding
ct_cHexEncoding def/PaintType 0 def currentdict end def/BaseFontTemplate 11
dict begin/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def
/Encoding ct_cHexEncoding def/BuildChar/ct_BuildCharIncremental load def
ct_Clone?{/FontType 3 def/ct_ShowCharString/ct_Type3ShowCharString load def
/ct_dfSetCacheProc/ct_CloneSetCacheProc load def/ct_SyntheticBold false def
/ct_StrokeWidth 1 def}{/FontType 4 def/Private 1 dict dup/lenIV 4 put def
/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def/PaintType 0 def
/ct_ShowCharString/ct_Type4ShowCharString load def}ifelse/ct_str1 1 string def
currentdict end def/BaseFontDictSize BaseFontTemplate length 5 add def
/ct_matrixeq{true 0 1 5{dup 4 index exch get exch 3 index exch get eq and dup
not{exit}if}for exch pop exch pop}bind def/ct_makeocf{15 dict begin exch/WMode
exch def exch/FontName exch def/FontType 0 def/FMapType 2 def/FontMatrix
matrix def/bfCount 1 index/CIDCount get 256 idiv 1 add dup 256 gt{pop 256}if
def/Encoding 256 array 0 1 bfCount 1 sub{2 copy dup put pop}for bfCount 1 255{
2 copy bfCount put pop}for def/FDepVector bfCount dup 256 lt{1 add}if array
def BaseFontTemplate BaseFontDictSize dict copy begin/CIDFont exch def CIDFont
/FontBBox known{CIDFont/FontBBox get/FontBBox exch def}if CIDFont/CDevProc
known{CIDFont/CDevProc get/CDevProc exch def}if currentdict end
BaseFontNameStr 3(0)putinterval 0 1 bfCount dup 256 eq{1 sub}if{FDepVector
exch 2 index BaseFontDictSize dict copy begin dup/CIDFirstByte exch 256 mul
def FontType 3 eq{/ct_FDDict 2 dict def}if currentdict end 1 index 16
BaseFontNameStr 2 2 getinterval cvrs pop BaseFontNameStr exch definefont put}
for ct_Clone?{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
if FontName currentdict end definefont ct_Clone?{gsave dup 1000 scalefont
setfont ct_BuildCharDict begin/usewidths? false def currentfont/Widths get
begin exch/CIDFont get/GlyphDirectory get{pop dup charcode exch 1 index 0 2
index 256 idiv put 1 index exch 1 exch 256 mod put stringwidth 2 array astore
def}forall end/usewidths? true def end grestore}{exch pop}ifelse}bind def
/ct_ComposeFont{ct_UseNativeCapability?{2 index/CMap ct_resourcestatus{pop pop
exch pop}{/CIDInit/ProcSet findresource begin 12 dict begin begincmap/CMapName
3 index def/CMapVersion 1 def/CMapType 1 def exch/WMode exch def/CIDSystemInfo
3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs
(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop
(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1
begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0
endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}
ifelse composefont}{3 2 roll pop 0 get/CIDFont findresource ct_makeocf}ifelse}
bind def/ct_MakeIdentity{ct_UseNativeCapability?{1 index/CMap
ct_resourcestatus{pop pop}{/CIDInit/ProcSet findresource begin 12 dict begin
begincmap/CMapName 2 index def/CMapVersion 1 def/CMapType 1 def/CIDSystemInfo
3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs
(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop
(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1
begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0
endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}
ifelse composefont}{exch pop 0 get/CIDFont findresource ct_makeocf}ifelse}bind
def currentdict readonly pop end end
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 9
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 6
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 12
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 le and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
gsave
clippath
pathbbox
/BByMax exch def
/BBxMax exch def
/BByMin exch def
/BBxMin exch def
grestore
BBxMax BBxMin eq BByMax BByMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
/areaOfConcern
BBxMin BByMin BBxMax BByMax
BBxMin BByMin
BBxMax BBxMin sub 0
0 BByMax BByMin sub
BBxMin BBxMax sub 0
12 packedarray
< 0B 00 01 04 04 04 0A>
2 packedarray
def
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
r1 add
r2 sub
abs
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 5
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} load dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
81 574 277 221 rectclip
/N10 [/DeviceRGB] /ColorSpace defineRes pop

%%BeginResource: font NPHJHD+TimesNewRoman,Italic
11 dict begin
/FontName /NPHJHD+TimesNewRoman,Italic def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 940 dict dup begin
/.notdef 
<10bf317005b8302fd45b07fb1549d56700cd874f9785acaaa30edf166f7d
7fe0592f51d07c5aaaff66bb85fa> ND 
/zero 
<10bf317035a3455affbefbb18aa56c7bcb209c22d6a0380f983cb38b5be6
cced6d3d03ac1d04f42342143714116ed587871b818152cd983c55ea36a0
1687ea7c5ebd173d443dc61e1c6f529f53561657713f3d7749de08fd7ce2
ae2c96433caa1908055438a39f51c5a53a7cd6e0b414f9a9126e30c2573a
7c5be42023c18561915f2f750ef6ca72f9d8125c87d3d41337c5bf6434a3
c80c3080f477f902c76584f4bd8397458d6af7c7eb0e4de56b6e> ND 
/one 
<10bf31703a9bd692ccb54a3320fcd57838ffc18c28738c3cff6df75cb0b6
941ff65298cf7246e8e2c6d31d40a68f434892a0fd9a8e2aa2a4b3b5ec3c
95ca854a8570ce87c7d96a0e563c0d1acc083137f6cf92eb333a3b9d81e1
b46800d2b26e62fe266e8fa6f31d7055112c9ab964fb9e0d06b41f416120
> ND 
/two 
<10bf317069b1fd7149af4ad1ce0782ea062b0ef2bee03800737707cfa55d
c5b9f47cc0d99055bce09f65a1ee1003e1895b6884a7bb3443402e0079dc
90bd5bc6940910d95d4afe07f90ccdb1477bfc25fc97c07ce35f57a4fc4d
b4ff60ed43d43d56c19f4f1e2088b887ec69835bd6faf6655978e7f8109b
fdbba9b67e9be850b8a5f55d7e56> ND 
/three 
<10bf31705e925b80b4c370042a06478b27d5508c2c4be32c7822fd58c370
74268490139eaa9b7bc9c547caca0e331d80774e7b26ae2650368274501e
df138313f9a9c18a37ad765378d579d7c60a9f3dafb8dd618f58daac4a1b
483261ddf2439b7ff9804aae237db15582d116af313bf18e828853c60bd8
63891a93dc64f825d4d122a916e53ed39a1cf9455d587d3948cbc5fccc3a
990d3418851636773e8414b06006f41c7ec70a04f84cc727ee4571634a69
f718f44266c3d5596ce6fe9e07945cf41e9475f9166c1da92c2934f690fc
e4f2a7c61c05ba32a822bd04e6> ND 
/G 
<10bf317022f0081597cff576c41b27466fe1e52d193034b36888cf3b2ca3
68a68d779fafce3b72c5293d6a3f887f14f5a58b0034aee71698546c4c0b
991181b84d52072635415222f7bd056e66888b79f595879cd3baf7efe159
063d43845ef9a025705d8ec9651b457099654394d2992e33c012343fc4f2
66bd7986fb9a6f6efaf2a6ba768f8b612ddae90ca0c801101a2b8812c0d1
878114ac488c2949f4102b5df4236669c09640ae29afbccb443338828b0c
4517115a6e5e3eaba334cf1dcb7ac13c67e72a57aac6dbd46b8372a5bd25
904367c6e60889f07aa8786d7c3e90b25aad92f3e9244c386428145e> ND 
/n 
<10bf31706c4c5babe2189495ddde2b9373264a7a928dce69ea574f750bc9
3936dca6784a06b0b80e689a2229e6ef44eee9152971cbd9df02a5391a70
99881b20618c2565b340cb3d7ed02aad7a971759a5e3ffcfa7c6cb458108
ec8cbf3d1978bd60113d37f1e46a87c5ae5bdc0ce7a3651d25446e649841
4bfc4c620a4b68ffbb46b586db9fbe809299328f092a75e76eb2de927e67
28923e48dadc1bf28eb67e5ad34159a4c611c536ce98a28c9808aa8e0b2d
3bc45a0f9207ba54a0dc05041f1c7e0c3ce92199983bfd0075d4c92fcb95
81109866bac621390cb4b52179227dda54c600d8> ND 
/x 
<10bf31709a34689d20de436a3b1ca1960ef1f724fa013d118d5fe9ed7e96
fd94ce6d37005d76b93e78e0bd45d92769a6db47c0a182ea8a8a98b1b25d
833e389c9b7a9bf84282848c4eea9c4861250ec3a0aff4bc7902d24819d8
3b7709cfaa2e3628baa18a4c949baa2ad886411d1ffcd1d7b7f15ee9027a
0be4a124a03cad4e2b39d7d777f0657aa42df753dffc27b74a311bb5bc44
e4f55e0c0d77957b14fd6c7437949168caa42d65bd683f0f102068a1ddb4
88f98563ce685f199bc90f8c81c5ab5573ce6ffc0238d5c25eb78a7fe7f3
73fbab02eda6e9fd37b756d8bdf70fa0ee47ef914f607b7826d86889dba0
e4f5f4bac555ecaa425014574f1b0608cdb23847f440bb9e171b73d082a4
ad42b4e00d43c176d6f015cb> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/NPHJHD+TimesNewRoman,Italic findfont /Encoding get
dup 0 /.notdef put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 71 /G put
dup 110 /n put
dup 120 /x put
pop
%%EndResource
[/N23/NPHJHD+TimesNewRoman,Italic 1 TZ
%%BeginResource: font NPHJHB+Arial
11 dict begin
/FontName /NPHJHB+Arial def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1320 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/period 
<10bf317014482feecab94451e2e92893e6ea1ac0> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/NPHJHB+Arial findfont /Encoding get
dup 0 /.notdef put
dup 46 /period put
pop
%%EndResource
[/N17/NPHJHB+Arial 1 TZ
 Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%!PS-Adobe-3.0 Resource-CIDFont
%%DocumentNeededResources: procset CIDInit
%%IncludeResource: procset CIDInit
%%BeginResource: CIDFont NPHJGF+SymbolMT
%%Title: (NPHJGF+SymbolMT Adobe Identity 0)
%%Version: 1
/CIDInit /ProcSet findresource begin
20 dict begin
/CIDFontName /NPHJGF+SymbolMT def
/CIDFontVersion 1 def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
  /Registry (Adobe) def
  /Ordering (Identity) def
  /Supplement 0 def
end def
/CIDMapOffset 0 def
/FDBytes 0 def
/GDBytes 3 def
/FontBBox [0 -220 1113 1005] def
/FontInfo 2 dict dup begin
/FSType 4 def
/OrigFontType /TrueType def
end readonly def
/CIDCount 65535 def
/FDArray 1 array
dup 0
  %ADOBeginFontDict
  10 dict begin
  /FontType 1 def
  /PaintType 0 def
  /FontName /NPHJGF+SymbolMT def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
  %ADOBeginPrivateDict
  /Private 8 dict dup begin
  /BlueValues [-15 0 600 650] def
  /MinFeature {16 16} def
  /LanguageGroup 1 def
  /password 5839 def
  /lenIV 4 def
  end def
  %ADOEndPrivateDict
currentdict end
%ADOEndFontDict
put def
/GlyphDirectory 1 dict def
ct_GlyphDirProcs begin GlyphDirectory +
0 <10bf31704faacd68130743d1032b19039b05d30ed4559c5ecf2da4ace2ab
53168b5c58eb3d8c199cf05ae7> |
!
end
%%BeginData: 21 Binary Bytes
(Binary) 0 StartData
%%EndData
%%EndResource
 ct_restoreCIDInit /NPHJGF+SymbolMT-Identity-H /Identity-H 0 [/NPHJGF+SymbolMT] ct_ComposeFont pop end end 
%%BeginResource: encoding
% Identity-H
%PDF_BeginEncoding: N13 (NPHJGF+SymbolMT-Identity-H)
/N13 (NPHJGF+SymbolMT-Identity-H) /Identity-H [ (NPHJGF+SymbolMT) ]
 /NoSubstitution [ /Serif ] 0 TZzero
%%EndResource
1 J
1 j
0.240005 w
10 M
[] 0 d
false setSA
n
125.76 720.14 m
125.88 721.88 l
126.18 723.56 l
126.78 725.18 l
127.5 726.74 l
128.46 728.12 l
129.6 729.44 l
130.92 730.58 l
132.36 731.54 l
133.86 732.26 l
135.48 732.86 l
137.22 733.16 l
138.9 733.28 l
140.64 733.16 l
142.32 732.86 l
143.94 732.26 l
145.5 731.54 l
146.94 730.58 l
148.2 729.44 l
149.34 728.12 l
150.3 726.74 l
151.08 725.18 l
151.62 723.56 l
151.92 721.88 l
152.04 720.14 l
151.92 718.4 l
151.62 716.72 l
151.08 715.1 l
150.3 713.54 l
149.34 712.16 l
148.2 710.84 l
146.94 709.7 l
145.5 708.74 l
143.94 708.02 l
142.32 707.42 l
140.64 707.12 l
138.9 707 l
137.22 707.12 l
135.48 707.42 l
133.86 708.02 l
132.36 708.74 l
130.92 709.7 l
129.6 710.84 l
128.46 712.16 l
127.5 713.54 l
126.78 715.1 l
126.18 716.72 l
125.88 718.4 l
125.76 720.14 l
h
q
1 1 1 setrgbcolor
eofill
Q
0 0 0 setrgbcolor
S
134.64 717.14 m
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_GlyphDirProcs begin
/NPHJGF+SymbolMT 1
GetGlyphDirectory
84 <10bf3170448be208f8bb1425c79e9b8fe2f51755eb5fa2ee5e89b120dda0
1d3be95626be97ab4d37c9b2bf23414f0800d829129aa43108035645ff92
26cfb91d394c5f79db7a467d98fb95d40e99834ad494ad4881a174ef12d4
f8df671f259be7d349562d3cb3ac3f03aa100eb2d9b140c80d08480deb57
8d4459d08784a57bfef51276776270aad6e1a45e354df1abdc2e78edf6a4
2d80a8a5ffa4b649e2df5c8131a26fb8229e748d3c8ed2e108ed1bfd4ef4
482eb42ccd8e2fe6333cf44ed584> |
!
end end end
/N13 [10.02 0 3.427 10.02 0 0] Tf
(\000T) show
139.86 713.84 m
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_GlyphDirProcs begin
/NPHJGF+SymbolMT 1
GetGlyphDirectory
20 <10bf317005ae401898a54b0ec88c93653a841b7c07218a0a0af06af651c0
73314768784630c60de0cec7076aae8ac05e0ffb3252a32fb505ec42ec45
b10eb1008cff2b494a361061c2d5bbbf1b865befe550661077e7a3907c17
9eaa0e5611f975bc03093225a461c3c44f> |
!
end end end
/N13 [6.66 0 2.27769 6.66 0 0] Tf
(\000\024) show
n
171.3 693.14 m
171.42 694.88 l
171.78 696.56 l
172.32 698.18 l
173.1 699.74 l
174.06 701.12 l
175.2 702.44 l
176.46 703.58 l
177.9 704.54 l
179.46 705.26 l
181.08 705.86 l
182.76 706.16 l
184.5 706.28 l
186.18 706.16 l
187.86 705.86 l
189.48 705.26 l
191.04 704.54 l
192.48 703.58 l
193.74 702.44 l
194.88 701.12 l
195.84 699.74 l
196.62 698.18 l
197.16 696.56 l
197.52 694.88 l
197.64 693.14 l
197.52 691.4 l
197.16 689.72 l
196.62 688.1 l
195.84 686.54 l
194.88 685.16 l
193.74 683.84 l
192.48 682.7 l
191.04 681.74 l
189.48 681.02 l
187.86 680.42 l
186.18 680.12 l
184.5 680 l
182.76 680.12 l
181.08 680.42 l
179.46 681.02 l
177.9 681.74 l
176.46 682.7 l
175.2 683.84 l
174.06 685.16 l
173.1 686.54 l
172.32 688.1 l
171.78 689.72 l
171.42 691.4 l
171.3 693.14 l
h
q
1 1 1  setrgbcolor
eofill
Q
S
180.18 690.14 m
/N13 [10.02 0 3.427 10.02 0 0] Tf
(\000T) show
185.4 686.84 m
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_GlyphDirProcs begin
/NPHJGF+SymbolMT 1
GetGlyphDirectory
21 <10bf31705245f700165be034eebbcba395dd89ecd26611abcc67af23b0c6
f28ec388465617e94fd47910da50bc65d4cec94f3fb6da222153cdeec1f1
4365e518120992ae4a9d7c0c10adb914a45d4d9af21b8ae8d80392c8b51f
27c64efdf1a50118530bcdc85e46738dd18f1c33ca90591532ac3e5ded08
8f00ed368438940f20cddebaa11bb0640e18> |
!
end end end
/N13 [6.66 0 2.27769 6.66 0 0] Tf
(\000\025) show
282.66 777.68 m
/N17 13.98 Tf
(...) show
n
126 590 m
126.06 591.68 l
126.42 593.42 l
126.96 595.04 l
127.74 596.54 l
128.7 597.98 l
129.84 599.3 l
131.1 600.44 l
132.54 601.4 l
134.1 602.12 l
135.72 602.72 l
137.4 603.02 l
139.14 603.14 l
140.82 603.02 l
142.5 602.72 l
144.18 602.12 l
145.68 601.4 l
147.12 600.44 l
148.44 599.3 l
149.58 597.98 l
150.48 596.54 l
151.26 595.04 l
151.8 593.42 l
152.16 591.68 l
152.28 590 l
152.16 588.26 l
151.8 586.58 l
151.26 584.96 l
150.48 583.4 l
149.58 581.96 l
148.44 580.7 l
147.12 579.56 l
145.68 578.6 l
144.18 577.82 l
142.5 577.28 l
140.82 576.98 l
139.14 576.86 l
137.4 576.98 l
135.72 577.28 l
134.1 577.82 l
132.54 578.6 l
131.1 579.56 l
129.84 580.7 l
128.7 581.96 l
127.74 583.4 l
126.96 584.96 l
126.42 586.58 l
126.06 588.26 l
126 590 l
h
q
0.936996 0.936996 0.936996  setrgbcolor
eofill
Q
S
135.24 587 m
/N23 10.02 Tf
(x) show
139.68 583.64 m
/N23 6.66 Tf
(1) show
n
101.22 765.68 m
102.6 765.8 l
103.98 766.16 l
105.3 766.7 l
106.5 767.42 l
107.58 768.32 l
108.48 769.4 l
109.26 770.6 l
109.8 771.92 l
110.1 773.3 l
110.22 774.68 l
110.22 782.6 l
110.1 783.98 l
109.8 785.36 l
109.26 786.68 l
108.48 787.88 l
107.58 788.96 l
106.5 789.86 l
105.3 790.58 l
103.98 791.12 l
102.6 791.48 l
101.22 791.6 l
93.36 791.6 l
91.92 791.48 l
90.54 791.12 l
89.28 790.58 l
88.08 789.86 l
87 788.96 l
86.04 787.88 l
85.32 786.68 l
84.78 785.36 l
84.48 783.98 l
84.36 782.6 l
84.36 774.68 l
84.48 773.3 l
84.78 771.92 l
85.32 770.6 l
86.04 769.4 l
87 768.32 l
88.08 767.42 l
89.28 766.7 l
90.54 766.16 l
91.92 765.8 l
93.36 765.68 l
101.22 765.68 l
h
q
1 1 1  setrgbcolor
eofill
Q
S
91.98 775.64 m
/N23 10.02 Tf
(G) show
99.24 772.34 m
/N23 6.66 Tf
(0) show
n
101.22 734.18 m
102.6 734.3 l
103.98 734.66 l
105.3 735.2 l
106.5 735.92 l
107.58 736.82 l
108.48 737.9 l
109.26 739.1 l
109.8 740.42 l
110.1 741.8 l
110.22 743.18 l
110.22 751.1 l
110.1 752.48 l
109.8 753.86 l
109.26 755.18 l
108.48 756.38 l
107.58 757.46 l
106.5 758.36 l
105.3 759.08 l
103.98 759.62 l
102.6 759.98 l
101.22 760.1 l
93.36 760.1 l
91.92 759.98 l
90.54 759.62 l
89.28 759.08 l
88.08 758.36 l
87 757.46 l
86.04 756.38 l
85.32 755.18 l
84.78 753.86 l
84.48 752.48 l
84.36 751.1 l
84.36 743.18 l
84.48 741.8 l
84.78 740.42 l
85.32 739.1 l
86.04 737.9 l
87 736.82 l
88.08 735.92 l
89.28 735.2 l
90.54 734.66 l
91.92 734.3 l
93.36 734.18 l
101.22 734.18 l
h
q
1 1 1  setrgbcolor
eofill
Q
S
94.14 744.14 m
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_GlyphDirProcs begin
/NPHJGF+SymbolMT 1
GetGlyphDirectory
68 <10bf317046e98b07a55059c296002221a6bcec28633df7a787e1d7463c85
ebb8b48537717f23eb91164c991c9e37d75745a7d248b244db4c115534d3
bea9f059af807d0184f76d84408472e11a0332a8f562d95d542206bbf82e
2b72c35ffe861c8367794dc74f39d312092139882c80ba7bbc5162b5182b
b39c133498bd7b2ebe92a9ec6b04c5fd8bd5538e778742f6ab0c09d03c58
ccb5f9da31294ff46d754db787e82e56a4652a394025fdad7d27a0bca774
f4950d6054a8c2fc78f338f870fe4b9928ebd9aa44dd66f8d53608295298
b5a6d6f6f999f0ef1e6459> |
!
end end end
/N13 [10.02 0 3.427 10.02 0 0] Tf
(\000D) show
n
215.76 666.14 m
215.88 667.88 l
216.18 669.56 l
216.78 671.18 l
217.5 672.74 l
218.46 674.12 l
219.6 675.44 l
220.92 676.58 l
222.36 677.54 l
223.86 678.26 l
225.48 678.86 l
227.22 679.16 l
228.9 679.28 l
230.64 679.16 l
232.32 678.86 l
233.94 678.26 l
235.5 677.54 l
236.94 676.58 l
238.2 675.44 l
239.34 674.12 l
240.3 672.74 l
241.08 671.18 l
241.62 669.56 l
241.92 667.88 l
242.04 666.14 l
241.92 664.4 l
241.62 662.72 l
241.08 661.1 l
240.3 659.54 l
239.34 658.16 l
238.2 656.84 l
236.94 655.7 l
235.5 654.74 l
233.94 654.02 l
232.32 653.42 l
230.64 653.12 l
228.9 653 l
227.22 653.12 l
225.48 653.42 l
223.86 654.02 l
222.36 654.74 l
220.92 655.7 l
219.6 656.84 l
218.46 658.16 l
217.5 659.54 l
216.78 661.1 l
216.18 662.72 l
215.88 664.4 l
215.76 666.14 l
h
q
1 1 1  setrgbcolor
eofill
Q
S
224.64 663.14 m
(\000T) show
229.86 659.84 m
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_GlyphDirProcs begin
/NPHJGF+SymbolMT 1
GetGlyphDirectory
22 <10bf317046e83a1282e86765392744f276ceab75f0397ac41ed7b21e8c71
3fd9752d9aa6c8ca5d0ec3ad3abb4fab7604bfa57a5105d53d88f0cdd080
7ad255552e75cf97639a7176a3a48a1844690b2a17028eadd75da2dc661c
5ca02f32bb2c657bf593402376241d258563b284f697ea5d01d4b123f093
1779aed5ee9cde504c3965c503f471fc2879a5a51755d6de956fb7a89c99
21eb8c25860fc94d851195b95f5130f21832541b51c26875c6f39fc3083e
e6e78c64744853a5d681dc45785b16cb7087a0cf9ffffa113875bffb30a7
9760500c1b1396309702bea0e5e4> |
!
end end end
/N13 [6.66 0 2.27769 6.66 0 0] Tf
(\000\026) show
n
324.3 632.6 m
324.42 634.34 l
324.78 636.02 l
325.32 637.64 l
326.1 639.2 l
327.06 640.58 l
328.2 641.9 l
329.46 643.04 l
330.9 644 l
332.46 644.78 l
334.08 645.32 l
335.76 645.62 l
337.5 645.74 l
339.18 645.62 l
340.86 645.32 l
342.48 644.78 l
344.04 644 l
345.48 643.04 l
346.74 641.9 l
347.88 640.58 l
348.84 639.2 l
349.62 637.64 l
350.16 636.02 l
350.52 634.34 l
350.64 632.6 l
350.52 630.86 l
350.16 629.18 l
349.62 627.56 l
348.84 626 l
347.88 624.62 l
346.74 623.3 l
345.48 622.16 l
344.04 621.2 l
342.48 620.48 l
340.86 619.88 l
339.18 619.58 l
337.5 619.46 l
335.76 619.58 l
334.08 619.88 l
332.46 620.48 l
330.9 621.2 l
329.46 622.16 l
328.2 623.3 l
327.06 624.62 l
326.1 626 l
325.32 627.56 l
324.78 629.18 l
324.42 630.86 l
324.3 632.6 l
h
q
1 1 1  setrgbcolor
eofill
Q
S
333.18 629.6 m
/N13 [10.02 0 3.427 10.02 0 0] Tf
(\000T) show
338.4 626.3 m
/N23 6.66 Tf
(n) show
n
152.04 720.14 m
181.5 720.14 l
181.56 720.92 l
181.86 721.64 l
182.34 722.24 l
183 722.72 l
183.72 723.02 l
184.5 723.14 l
185.22 723.02 l
186 722.72 l
186.6 722.24 l
187.08 721.64 l
187.38 720.92 l
187.5 720.14 l
188.22 720.14 l
188.34 720.92 l
188.64 721.64 l
189.12 722.24 l
189.72 722.72 l
190.44 723.02 l
191.22 723.14 l
192 723.02 l
192.72 722.72 l
193.32 722.24 l
193.8 721.64 l
194.1 720.92 l
194.22 720.14 l
227.22 720.14 l
227.22 684.08 l
S
n
229.98 684.68 m
227.22 681.92 l
224.46 684.68 l
229.98 684.68 l
eofill
n
152.04 720.14 m
177.72 720.14 l
177.72 711.08 l
S
n
180.48 711.68 m
177.72 708.92 l
174.96 711.68 l
180.48 711.68 l
eofill
n
110.22 778.64 m
138.9 778.64 l
138.9 735.5 l
S
n
141.66 736.04 m
138.9 733.28 l
136.14 736.04 l
141.66 736.04 l
eofill
n
110.22 747.14 m
135.9 747.14 l
136.02 747.92 l
136.32 748.64 l
136.8 749.24 l
137.4 749.72 l
138.12 750.02 l
138.9 750.14 l
139.68 750.02 l
140.4 749.72 l
141 749.24 l
141.48 748.64 l
141.78 747.92 l
141.9 747.14 l
184.5 747.14 l
184.5 711.08 l
S
n
187.26 711.68 m
184.5 708.92 l
181.74 711.68 l
187.26 711.68 l
eofill
n
110.22 778.64 m
191.22 778.64 l
191.22 711.08 l
S
n
193.98 711.68 m
191.22 708.92 l
188.46 711.68 l
193.98 711.68 l
eofill
n
110.22 747.14 m
135.9 747.14 l
136.02 747.92 l
136.32 748.64 l
136.8 749.24 l
137.4 749.72 l
138.12 750.02 l
138.9 750.14 l
139.68 750.02 l
140.4 749.72 l
141 749.24 l
141.48 748.64 l
141.78 747.92 l
141.9 747.14 l
188.22 747.14 l
188.34 747.92 l
188.64 748.64 l
189.12 749.24 l
189.72 749.72 l
190.44 750.02 l
191.22 750.14 l
192 750.02 l
192.72 749.72 l
193.32 749.24 l
193.8 748.64 l
194.1 747.92 l
194.22 747.14 l
234 747.14 l
234 684.08 l
S
n
236.76 684.68 m
234 681.92 l
231.24 684.68 l
236.76 684.68 l
eofill
n
110.22 778.64 m
240.72 778.64 l
240.72 684.08 l
S
n
243.48 684.68 m
240.72 681.92 l
237.96 684.68 l
243.48 684.68 l
eofill
n
197.64 693.14 m
224.22 693.14 l
224.34 693.92 l
224.64 694.64 l
225.12 695.24 l
225.72 695.72 l
226.44 696.02 l
227.22 696.14 l
228 696.02 l
228.72 695.72 l
229.32 695.24 l
229.8 694.64 l
230.1 693.92 l
230.22 693.14 l
231 693.14 l
231.06 693.92 l
231.36 694.64 l
231.84 695.24 l
232.5 695.72 l
233.22 696.02 l
234 696.14 l
234.72 696.02 l
235.5 695.72 l
236.1 695.24 l
236.58 694.64 l
236.88 693.92 l
237 693.14 l
237.72 693.14 l
237.84 693.92 l
238.14 694.64 l
238.62 695.24 l
239.22 695.72 l
239.94 696.02 l
240.72 696.14 l
241.5 696.02 l
242.22 695.72 l
242.82 695.24 l
243.3 694.64 l
243.6 693.92 l
243.72 693.14 l
267.78 693.14 l
S
n
267.24 695.9 m
270 693.14 l
267.24 690.38 l
267.24 695.9 l
eofill
n
197.64 693.14 m
220.5 693.14 l
220.5 684.08 l
S
n
223.26 684.68 m
220.5 681.92 l
217.74 684.68 l
223.26 684.68 l
eofill
n
216 590 m
216.06 591.68 l
216.42 593.42 l
216.96 595.04 l
217.74 596.54 l
218.7 597.98 l
219.84 599.3 l
221.1 600.44 l
222.54 601.4 l
224.1 602.12 l
225.72 602.72 l
227.4 603.02 l
229.14 603.14 l
230.82 603.02 l
232.5 602.72 l
234.18 602.12 l
235.68 601.4 l
237.12 600.44 l
238.44 599.3 l
239.58 597.98 l
240.48 596.54 l
241.26 595.04 l
241.8 593.42 l
242.16 591.68 l
242.28 590 l
242.16 588.26 l
241.8 586.58 l
241.26 584.96 l
240.48 583.4 l
239.58 581.96 l
238.44 580.7 l
237.12 579.56 l
235.68 578.6 l
234.18 577.82 l
232.5 577.28 l
230.82 576.98 l
229.14 576.86 l
227.4 576.98 l
225.72 577.28 l
224.1 577.82 l
222.54 578.6 l
221.1 579.56 l
219.84 580.7 l
218.7 581.96 l
217.74 583.4 l
216.96 584.96 l
216.42 586.58 l
216.06 588.26 l
216 590 l
h
q
0.936996 0.936996 0.936996  setrgbcolor
eofill
Q
S
225.24 587 m
/N23 10.02 Tf
(x) show
229.68 583.64 m
/N23 6.66 Tf
(3) show
n
171.3 590 m
171.42 591.68 l
171.78 593.42 l
172.32 595.04 l
173.1 596.54 l
174.06 597.98 l
175.2 599.3 l
176.46 600.44 l
177.9 601.4 l
179.46 602.12 l
181.08 602.72 l
182.76 603.02 l
184.5 603.14 l
186.18 603.02 l
187.86 602.72 l
189.48 602.12 l
191.04 601.4 l
192.48 600.44 l
193.74 599.3 l
194.88 597.98 l
195.84 596.54 l
196.62 595.04 l
197.16 593.42 l
197.52 591.68 l
197.64 590 l
197.52 588.26 l
197.16 586.58 l
196.62 584.96 l
195.84 583.4 l
194.88 581.96 l
193.74 580.7 l
192.48 579.56 l
191.04 578.6 l
189.48 577.82 l
187.86 577.28 l
186.18 576.98 l
184.5 576.86 l
182.76 576.98 l
181.08 577.28 l
179.46 577.82 l
177.9 578.6 l
176.46 579.56 l
175.2 580.7 l
174.06 581.96 l
173.1 583.4 l
172.32 584.96 l
171.78 586.58 l
171.42 588.26 l
171.3 590 l
h
q
0.936996 0.936996 0.936996  setrgbcolor
eofill
Q
S
180.6 587 m
/N23 10.02 Tf
(x) show
185.04 583.64 m
/N23 6.66 Tf
(2) show
n
324.3 590 m
324.42 591.68 l
324.78 593.42 l
325.32 595.04 l
326.1 596.54 l
327.06 597.98 l
328.2 599.3 l
329.46 600.44 l
330.9 601.4 l
332.46 602.12 l
334.08 602.72 l
335.76 603.02 l
337.5 603.14 l
339.18 603.02 l
340.86 602.72 l
342.48 602.12 l
344.04 601.4 l
345.48 600.44 l
346.74 599.3 l
347.88 597.98 l
348.84 596.54 l
349.62 595.04 l
350.16 593.42 l
350.52 591.68 l
350.64 590 l
350.52 588.26 l
350.16 586.58 l
349.62 584.96 l
348.84 583.4 l
347.88 581.96 l
346.74 580.7 l
345.48 579.56 l
344.04 578.6 l
342.48 577.82 l
340.86 577.28 l
339.18 576.98 l
337.5 576.86 l
335.76 576.98 l
334.08 577.28 l
332.46 577.82 l
330.9 578.6 l
329.46 579.56 l
328.2 580.7 l
327.06 581.96 l
326.1 583.4 l
325.32 584.96 l
324.78 586.58 l
324.42 588.26 l
324.3 590 l
h
q
0.936996 0.936996 0.936996  setrgbcolor
eofill
Q
S
333.6 587 m
/N23 10.02 Tf
(x) show
338.04 583.64 m
/N23 6.66 Tf
(n) show
n
138.9 707 m
138.9 693.5 l
139.14 693.5 l
139.14 605.36 l
S
n
141.9 605.9 m
139.14 603.14 l
136.38 605.9 l
141.9 605.9 l
eofill
n
184.5 680 m
184.5 605.36 l
S
n
187.26 605.9 m
184.5 603.14 l
181.74 605.9 l
187.26 605.9 l
eofill
n
228.9 653 m
228.9 639.5 l
229.14 639.5 l
229.14 605.36 l
S
n
231.9 605.9 m
229.14 603.14 l
226.38 605.9 l
231.9 605.9 l
eofill
n
337.5 619.46 m
337.5 605.36 l
S
n
340.26 605.9 m
337.5 603.14 l
334.74 605.9 l
340.26 605.9 l
eofill
282.12 586.7 m
/N17 13.98 Tf
(...) show
n
242.04 666.14 m
267.78 666.14 l
S
n
267.24 668.9 m
270 666.14 l
267.24 663.38 l
267.24 668.9 l
eofill
n
152.04 720.14 m
181.5 720.14 l
181.56 720.92 l
181.86 721.64 l
182.34 722.24 l
183 722.72 l
183.72 723.02 l
184.5 723.14 l
185.22 723.02 l
186 722.72 l
186.6 722.24 l
187.08 721.64 l
187.38 720.92 l
187.5 720.14 l
188.22 720.14 l
188.34 720.92 l
188.64 721.64 l
189.12 722.24 l
189.72 722.72 l
190.44 723.02 l
191.22 723.14 l
192 723.02 l
192.72 722.72 l
193.32 722.24 l
193.8 721.64 l
194.1 720.92 l
194.22 720.14 l
231 720.14 l
231.06 720.92 l
231.36 721.64 l
231.84 722.24 l
232.5 722.72 l
233.22 723.02 l
234 723.14 l
234.72 723.02 l
235.5 722.72 l
236.1 722.24 l
236.58 721.64 l
236.88 720.92 l
237 720.14 l
237.72 720.14 l
237.84 720.92 l
238.14 721.64 l
238.62 722.24 l
239.22 722.72 l
239.94 723.02 l
240.72 723.14 l
241.5 723.02 l
242.22 722.72 l
242.82 722.24 l
243.3 721.64 l
243.6 720.92 l
243.72 720.14 l
267.78 720.14 l
S
n
267.24 722.9 m
270 720.14 l
267.24 717.38 l
267.24 722.9 l
eofill
n
110.22 778.64 m
267.78 778.64 l
S
n
267.24 781.4 m
270 778.64 l
267.24 775.88 l
267.24 781.4 l
eofill
n
306 666.14 m
324 666.14 l
324 650.36 l
S
n
326.76 650.9 m
324 648.14 l
321.24 650.9 l
326.76 650.9 l
eofill
n
306 693.14 m
330.72 693.14 l
330.72 650.36 l
S
n
333.48 650.9 m
330.72 648.14 l
327.96 650.9 l
333.48 650.9 l
eofill
n
110.22 747.14 m
135.9 747.14 l
136.02 747.92 l
136.32 748.64 l
136.8 749.24 l
137.4 749.72 l
138.12 750.02 l
138.9 750.14 l
139.68 750.02 l
140.4 749.72 l
141 749.24 l
141.48 748.64 l
141.78 747.92 l
141.9 747.14 l
188.22 747.14 l
188.34 747.92 l
188.64 748.64 l
189.12 749.24 l
189.72 749.72 l
190.44 750.02 l
191.22 750.14 l
192 750.02 l
192.72 749.72 l
193.32 749.24 l
193.8 748.64 l
194.1 747.92 l
194.22 747.14 l
237.72 747.14 l
237.84 747.92 l
238.14 748.64 l
238.62 749.24 l
239.22 749.72 l
239.94 750.02 l
240.72 750.14 l
241.5 750.02 l
242.22 749.72 l
242.82 749.24 l
243.3 748.64 l
243.6 747.92 l
243.72 747.14 l
268.14 747.14 l
S
n
267.54 749.9 m
270.3 747.14 l
267.54 744.38 l
267.54 749.9 l
eofill
n
306 720.14 m
337.5 720.14 l
337.5 650.36 l
S
n
340.26 650.9 m
337.5 648.14 l
334.74 650.9 l
340.26 650.9 l
eofill
n
306 747.14 m
344.22 747.14 l
344.22 650.36 l
S
n
346.98 650.9 m
344.22 648.14 l
341.46 650.9 l
346.98 650.9 l
eofill
n
306 778.64 m
351 778.64 l
351 650.36 l
S
n
353.76 650.9 m
351 648.14 l
348.24 650.9 l
353.76 650.9 l
eofill
282.66 746.42 m
(...) show
282.12 719.421 m
(...) show
282.12 692.181 m
(...) show
282.12 665.181 m
(...) show
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%EOF
